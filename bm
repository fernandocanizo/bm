#!/usr/bin/env bash

# Uncomment any of this settings for debugging

# exit if any statement returns false value (can't use $? from now on)
#set -o errexit
# exit if variable not set
#set -o nounset
# uncomment to debug
#set -x


VERSION="0.4.1"

CONFIGURATION_FILE="${HOME}/.config/bmrc"

# Order of preference for configuration:
# 1st environment variables
# 2nd configuration file
# 3rd script variable

if [[ -z ${BM_SAVE_DIR} ]]; then
	if [[ -r ${CONFIGURATION_FILE} ]]; then
		source ${CONFIGURATION_FILE}

	else
		# create one
		echo "No configuration file. Creating one..."
		cat <<"ENDCONFIGFILE" > ${CONFIGURATION_FILE}
#!/usr/bin/env bash

# Configuration file for bm bookmark manager
# https://github.com/fernandocanizo/bm


# You can also export these variables or set them in the command line to
# temporally change bm behavior

export BM_SAVE_DIR="${HOME}/Dropbox/bmbookmarks"
ENDCONFIGFILE

		BM_SAVE_DIR="${HOME}/Dropbox/bmbookmarks"
	fi
fi

# default bookmarks file. Used when no category is given
BOOKMARKS="${BM_SAVE_DIR}/bookmarks"

# ensure directory for saving bm bookmarks exists
if [[ ! -d ${BM_SAVE_DIR} ]]; then
	mkdir ${BM_SAVE_DIR}
fi

#
# Output usage info
#

usage() {
  cat <<EOF

  Usage: bm [options] [cmd]

  Commands:

    # add a bookmark
	$ bm add [-d description] [-f] [-t tag [...]] [-c category [category/subcategory/.../]] URL

	Where:

	-d description
	adds a description text

	-f
	fetches the title from the page

	-t tag
	adds a tag. More can be added

	-c category/subcategory
	puts the link under said category and or subcategory. Which is just a path
	in your filesystem, so you can build trees.


    # open the first bookmark matching <query>
    $ bm open <query>
    $ bm <query>


    # search the bookmarks via full-text <query>
    $ bm search <query>


    # show tags
    $ bm tags


    # display statistics about the bookmarks
    $ bm stats


	# command with no extra parameters default to list all available bookmarks
    $ bm


  Options:

     -V, --version   output bm version
     -h, --help      output this help information

EOF
}


#
# Add a bookmark:
# bm add [-d description] [-f] [-t tag [...]] [-c category [category/subcategory/.../]] URL
#

add_bookmark() {
	fetchTitle=0;

	# process parameters
	while test $# -ne 0; do
		arg=$1; shift
		case $arg in
			-f)
				fetchTitle=1;
				;;

			-d)
				description=$1;
				shift;
				;;

			-t)
				if [[ -z ${tags} ]]; then
					tags=$1;
				else
					tags=${tags}:$1;
				fi
				shift;
				;;

			-c)
				category=$1
				mkdir -p ${BM_SAVE_DIR}/${category}
				# TODO decide what to do if category ends like .../bookmarks
				bookmarksFile=${BM_SAVE_DIR}/${category}/bookmarks
				if [[ ! -e ${bookmarksFile} ]]; then
					# set header
					echo "URL|Page Title|Description|Tags" >> $bookmarksFile;
				fi
				;;

			*)
				url=$arg
				;;
		esac
	done

	if [[ 1 -eq ${fetchTitle} ]]; then
		echo "Fetching page title..."
		pageTitle=`curl -s ${url} | \grep -Po '(?i)(?<=<title>).*(?i)(?=</title>)'`
	fi

	if [[ -z $bookmarksFile ]]; then
		bookmarksFile=$BOOKMARKS
	fi

	cat <<ADD_BOOKMARK
Adding bookmarks
	url: $url
	description: $description
	title: $pageTitle
	tags: $tags
ADD_BOOKMARK

	echo "${url}|${pageTitle}|${description}|${tags}" >> $bookmarksFile
}


#
# List all bookmarks
#

list_bookmarks() {
	if [[ ! -r ${BOOKMARKS} ]]; then
		echo "No bookmarks yet. Try saving some with 'bm add <url>'"
		return
	fi

  echo
  cat $BOOKMARKS \
    | awk '
    BEGIN { FS = "|" }
    {
      printf "  \033[36m%s\033[0m\n", $1
      printf "  \033[33m%s\033[0m\n", $2
      printf "  \033[90m%s\033[0m\n\n", $3
    }' \
    | sed 's/http:\/\///'
  echo
}

#
# Search all bookmarks with <query>
#

search_bookmarks() {
  echo
  cat $BOOKMARKS \
    | grep $1 \
    | awk '
    BEGIN { FS = "|" }
    {
      printf "  \033[36m%s\033[0m\n", $1
      printf "  \033[33m%s\033[0m\n", $2
      printf "  \033[90m%s\033[0m\n\n", $3
    }' \
    | sed 's/http:\/\///'
  echo
}

#
# Open first bookmark matching <query>
#

open_bookmark() {
  cat $BOOKMARKS \
    | grep $1 \
    | cut -d '|' -f 1 \
    | xargs open
}

#
# Diplay some statistics about the bookmarks
#

show_statistics() {
  local total_bookmarks=$(cat $BOOKMARKS | wc -l | sed 's/^ *//')
  local total_tags=$(list_tags | wc -l | sed 's/^ *//')

  echo
  echo "    total bookmarks: $total_bookmarks"
  echo "         total tags: $total_tags"
  echo "        top 10 tags: `display_top_ten_tags`"
  echo
}

#
# Output tags.
#

list_tags() {
  cat $BOOKMARKS \
    | cut -f3 -d '|' \
    | tr " " "\n" \
    | sort \
    | uniq -c \
    | sort -nr
}

# 
# Display the 10 most frequently used tags
#

display_top_ten_tags() {
  echo
  printf "%20s  %s\n" count tag
  list_tags \
    | head -10 \
    | awk '{ printf("%20d  %s\n", $1, $2) }'
}


#
# List urls
#

urls() {
  cat $BOOKMARKS \
    | grep "$1" \
    | cut -d '|' -f 1
}


# no args defaults to list bookmarks
if test $# -eq 0; then
  list_bookmarks
  exit
fi

# parse args

while test $# -ne 0; do
  arg=$1; shift
  case $arg in
    -V|--version) echo $VERSION; exit ;;
    -h|--help) usage; exit ;;
    tags) list_tags; exit ;;
    search) search_bookmarks "$@"; exit ;;
    open) open_bookmark "$@"; exit ;;
    add) add_bookmark "$@"; exit ;;
    stats) show_statistics; exit ;;
    *) open_bookmark $arg; exit ;;
  esac
done
